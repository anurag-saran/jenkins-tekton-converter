```yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: node-app-pipeline
spec:
  tasks:
    - name: checkout-task
      taskRef:
        name: tekton/git-clone
      params:
        - name: url
          value: "https://github.com/your-repository/node-app.git"
        - name: reference
          value: "master"
        - name: subdirectory
          value: ""
      workspaces:
        - name: source
          description: "Workspace for storing source code"
      steps:
        - name: git-clone-step
          image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
          env:
            - name: NODE_HOME
              value: "/usr/local/node"
          resources: {}
    - name: build-task
      taskRef:
        name: tekton/commands
      params:
        - name: args
          value: ["npm", "install"]
      workspaces:
        - name: source
          description: "Workspace for storing source code"
      steps:
        - name: npm-install-step
          image: node
          script: |
            # Install dependencies and prepare the app
            npm install
          env: []
          resources: {}
    - name: test-task
      taskRef:
        name: tekton/commands
      params:
        - name: args
          value: ["npm", "test"]
      workspaces:
        - name: source
          description: "Workspace for storing source code"
      steps:
        - name: npm-test-step
          image: node
          script: |
            # Run unit tests using Mocha (or other test frameworks)
            npm test
          env: []
          resources: {}
    - name: deploy-task
      taskRef:
        name: tekton/commands
      params:
        - name: args
          value: ["npm", "run", "deploy:staging"]
      workspaces:
        - name: source
          description: "Workspace for storing source code"
      steps:
        - name: deploy-step
          image: node
          script: |
            # Deploy the application to a staging environment
            npm run deploy:staging
          env: []
          resources: {}
    - name: cleanup-task
      taskRef:
        name: tekton/commands
      params:
        - name: args
          value: ["echo", "Cleaning up resources..."]
      workspaces: []
      steps:
        - name: echo-step
          image: ubuntu
          script: echo "Cleaning up resources..."
          env: []
          resources: {}
  finally:
    tasks:
      - name: pipeline-completed
        taskRef:
          name: tekton/commands
        params:
          - name: args
            value: ["echo", "Pipeline completed!"]
        workspaces: []
        steps:
          - name: pipeline-completed-step
            image: ubuntu
            script: echo "Pipeline completed!"
            env: []
            resources: {}

      - name: deployment-success
        taskRef:
          name: tekton/commands
        params:
          - name: args
            value: ["echo", "Deployment to staging successful!"]
        workspaces: []
        steps:
          - name: deployment-success-step
            image: ubuntu
            script: echo "Deployment to staging successful!"
            env: []
            resources: {}

      - name: pipeline-failed
        taskRef:
          name: tekton/commands
        params:
          - name: args
            value: ["echo", "Pipeline failed! Check the logs for errors."]
        workspaces: []
        steps:
          - name: pipeline-failed-step
            image: ubuntu
            script: echo "Pipeline failed! Check the logs for errors."
            env: []
            resources: {}
```